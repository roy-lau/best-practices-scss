@import "./_config";

@mixin generate-utility($utility, $infix) {
  $values: map-get($utility, values);

  // If the values are a list or string, convert it into a map
  @if type-of($values) == "string" or type-of(nth($values, 1)) != "list" {
    $values: zip($values, $values);
  }
  @each $value in $values {
    $properties: map-get($utility, property);

    // Multiple properties are possible, for example with vertical or horizontal margins or paddings
    @if type-of($properties) == "string" {
      $properties: append((), $properties);
    } @else {
      .v-application {
        @include generate-utility-body($utility, $properties, $value, $infix);
      }
    }
  }
}

@mixin generate-utility-body($utility, $properties, $value, $infix) {
  // Use custom class if present
  $property-class: map-get($utility, class);
  $property-class: if($property-class, $property-class, nth($properties, 1));

  // Don't prefix if value key is null (eg. with shadow class)
  $property-class-modifier: if(nth($value, 1), "-" + nth($value, 1), "");

  $value: nth($value, 2);

  .#{$property-class + $infix + $property-class-modifier} {
    @for $i from 1 through length($properties) {
      $property: nth($properties, $i);
      $val: $value;
      @if type-of($value) == "list" and length($properties) == length($value) {
        $val: nth($value, $i);
      }
      @if $val != false {
        // Check if unimportant property exists.
        // This allows you to conditional skip
        // defining a property as important.
        $unimportant: map-get($utility, unimportant);
        #{$property}: $val if(index($unimportant, $property), null, !important);
      }
    }
  }
}


/*------------------------------------*\
  BEM
  ref https://github.com/ElemeFE/element/blob/dev/packages/theme-chalk/src/mixins/mixins.scss
\*------------------------------------*/
 @mixin b($block) {
  $B: $namespace+'-'+$block !global;

  .#{$B} {
    @content;
  }
}

@mixin e($element) {
  $E: $element !global;
  $selector: &;
  $currentSelector: "";
  @each $unit in $element {
    $currentSelector: #{$currentSelector + "." + $B + $element-separator + $unit + ","};
  }

  @if hitAllSpecialNestRule($selector) {
    @at-root {
      #{$selector} {
        #{$currentSelector} {
          @content;
        }
      }
    }
  } @else {
    @at-root {
      #{$currentSelector} {
        @content;
      }
    }
  }
}

@mixin m($modifier) {
  $selector: &;
  $currentSelector: "";
  @each $unit in $modifier {
    $currentSelector: #{$currentSelector + & + $modifier-separator + $unit + ","};
  }

  @at-root {
    #{$currentSelector} {
      @content;
    }
  }
}

@mixin configurable-m($modifier, $E-flag: false) {
  $selector: &;
  $interpolation: '';

  @if $E-flag {
    $interpolation: $element-separator + $E-flag;
  }

  @at-root {
    #{$selector} {
      .#{$B+$interpolation+$modifier-separator+$modifier} {
        @content;
      }
    }
  }
}

@mixin spec-selector($specSelector: '', $element: $E, $modifier: false, $block: $B) {
  $modifierCombo: '';

  @if $modifier {
    $modifierCombo: $modifier-separator + $modifier;
  }

  @at-root {
    #{&}#{$specSelector}.#{$block+$element-separator+$element+$modifierCombo} {
      @content;
    }
  }
}

@mixin meb($modifier: false, $element: $E, $block: $B) {
  $selector: &;
  $modifierCombo: '';

  @if $modifier {
    $modifierCombo: $modifier-separator + $modifier;
  }

  @at-root {
    #{$selector} {
      .#{$block+$element-separator+$element+$modifierCombo} {
        @content;
      }
    }
  }
}

@mixin when($state) {
  @at-root {
    &.#{$state-prefix + $state} {
      @content;
    }
  }
}